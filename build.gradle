buildscript {
    repositories {
        maven {
            allowInsecureProtocol = true
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
            url 'http://192.168.2.3:8082/repository/xcmg-plugins/'
        }
    }

    dependencies {
        classpath "com.bmuschko:gradle-docker-plugin:6.7.0"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.5.2"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
    }
}

allprojects {

    group 'com.xcmg.cloud.fleet'
    version '1.0.0-SNAPSHOT'

    ext {
        springBootVersion = "2.5.2"
        springCloudVersion = "2020.0.3"
        springCloudAlibabaVersion = "2021.1"
        springBootAdminVersion = "2.4.2"
        springTestVersion="5.1.8.RELEASE"

        commonCollections4Version = "4.4"
        commonLang3Version = "3.9"
        commonIoVersion = "2.10.0"

        springJasyptVersion="3.0.3"
        jasyptVersion = "1.9.3"

        aspectjVersion = "1.9.7"
        sentinelVersion="1.8.2"
        fastjsonVersion="1.2.76"
        postgisJdbcVersion="1.3.3"

        mybatisBootStarterVersion = "2.2.0"
        mybatisPlusVersion = "3.4.3.1"
        jdbcPostgresqlVersion = "42.2.18"

        guavaVersion = "20.0"
        nettyVersion = "4.1.43.Final"
        kafkaVersion = "2.3.1"
        hbaseVersion = "2.1.9"
        jedisVersion = "3.2.0"

        mapstructVersion = "1.4.1.Final"

        knife4jStarterVersion = "3.0.3"
        awsSdkS3Version = "1.11.939"
        xxlJobVersion = "2.2.0"
    }

    configurations.all {
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "org.slf4j", module: "slf4j-simple"
    }

    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
            url 'http://192.168.2.3:8082/repository/xcmg-public'
        }
        maven {
            allowInsecureProtocol = true
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
            url 'http://192.168.2.3:8082/repository/xcmg-releases'
        }
        maven {
            allowInsecureProtocol = true
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
            url 'http://192.168.2.3:8082/repository/xcmg-snapshots'
        }
    }
}
// finding all projects which contains "src" directory, recognizing as java project
def projects = []
projectDir.eachDirRecurse { dir ->
    def dirName = dir.canonicalPath
    if (dirName.endsWith(File.separator + "src")) {
        def parent = dir.parent
        projects.add(parent.substring(parent.lastIndexOf(File.separator) + 1))
    }
}
// 过滤掉以ui为结尾的前端工程
def javaProjects = subprojects.findAll() {
    projects.contains(it.name) && !it.name.endsWith("ui")
}
// SpringBoot工程
def springBootProjects = subprojects.findAll() {
    projects.contains(it.name) &&
            !it.name.endsWith("ui") &&
            !it.name.contains("common") &&
            !it.name.contains("model") &&
            !it.name.contains("bus") &&
            !it.name.contains("persistence") &&
            !it.name.contains("api")
}
// SpringBoot工程配置
configure(springBootProjects){
    apply plugin: 'java'
    apply plugin: "com.bmuschko.docker-spring-boot-application"
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        // 配置中心客户端
        implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config"
        // 注册中心客户端
        implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery"
        implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:${springJasyptVersion}"

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    }

}
// configuration for all java sub-projects
configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    // specify the source dirs
    sourceSets {
        main({
            java {
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/resources'
            }
        })
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs += [
                '-Amapstruct.suppressGeneratorTimestamp=true',
                '-Amapstruct.suppressGeneratorVersionInfoComment=true',
                '-Amapstruct.verbose=true',
                '-Amapstruct.unmappedTargetPolicy=IGNORE'
        ]
    }

    // fixed the issue of failing to generate Javadoc.
    // Generated Javadoc options.
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charset', 'UTF-8')
    }

    jar {
        manifest.attributes provider: 'XCMG'
    }

    dependencies {
        implementation "com.alibaba:fastjson:${fastjsonVersion}"
        implementation "org.apache.commons:commons-collections4:${commonCollections4Version}"
        implementation "org.apache.commons:commons-lang3:${commonLang3Version}"
        implementation "commons-io:commons-io:${commonIoVersion}"
        implementation "com.google.guava:guava:${guavaVersion}"

        implementation "org.aspectj:aspectjrt:${aspectjVersion}"

        // entity to DTO, DTO to entity convert
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        implementation 'junit:junit:4.12'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "com.github.xiaoymin:knife4j-dependencies:${knife4jStarterVersion}"
        }
    }
/*=================================== custom tasks ============================================*/

}
